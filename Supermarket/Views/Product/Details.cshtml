@model ShoppingCart

<div class="container py-5">
    <form method="post" asp-controller="Product" asp-action="Details" enctype="multipart/form-data">
        <div class="card border-0 mt-4 rounded-4 shadow-lg">
            <div class="bg-gradient-header text-white py-4 px-4 rounded-top-4">
                <div class="row align-items-center">
                    <div class="col-12 d-flex justify-content-between align-items-center">
                        <h3 class="mb-0 text-3xl text-gray-800 font-bold text-white">@Model.Product.Name</h3> 
                        <h3 class="mb-0 text-warning text-4xl font-bold">₹ @(Model.Product.price.ToString("F2"))</h3> 
                    </div>
                    <div class="col-12 mt-2">
                        <h6 class="text-white text-opacity-75 mb-0">
                            @{
                                string categoryName = "No Category";
                                if (@Model.Product.Category != null)
                                {
                                    categoryName = @Model.Product.Category.Name.ToUpper();
                                }
                            }
                            <span><b>Category:</b> @categoryName</span>
                        </h6>
                    </div>
                </div>
            </div>

            <div class="card-body p-5">
                <div class="row">
                    <div class="col-12 col-lg-4 text-center mb-4 mb-lg-0">
                        <img id="ProfilePicture" alt="Product Image" src="~/img/@Model.Product.imgURL" class="rounded img-fluid card-img product-detail-img" /> @* Added custom class *@
                    </div>

                    <div class="col-12 col-lg-7 offset-lg-1">
                        <div class="mb-4">
                            <h6 class="text-dark fw-bold mb-2">Description:</h6>
                            <span class="text-dark opacity-75 lh-base">
                                @Html.Raw(@Model.Product.Description)
                            </span>
                        </div>

                        <div class="row align-items-center mb-4">
                            <div class="col-md-6">
                                <label for="quantity" class="form-label text-dark fw-bold">Quantity:</label>
                                <div class="input-group quantity-selector border rounded-pill overflow-hidden shadow-sm">
                                    <button type="button" class="btn btn-outline-secondary minus-btn flex-grow-0 py-2 px-3">
                                        <i class="bi bi-dash-lg"></i>
                                    </button>
                                    <input asp-for="@Model.quantity" type="text" value="1" class="form-control text-center quantity-input border-0 bg-white" readonly />
                                    <button type="button" class="btn btn-outline-secondary plus-btn flex-grow-0 py-2 px-3">
                                        <i class="bi bi-plus-lg"></i>
                                    </button>
                                </div>
                                <span asp-validation-for="quantity" class="text-danger mt-1 d-block"></span>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <input asp-for="@Model.productId" hidden />
                                <button type="submit" id="addToCartButton"
                                        class="btn bg-gradient-header w-100 py-3 text-uppercase fw-semibold text-white rounded-pill shadow-sm hover-scale-105 transition-all">
                                    <i class="bi bi-cart-plus me-2"></i> Add to Cart
                                </button>
                            </div>
                            @if (TempData["ProductError"] != null)
                            {
                                <div class="text-danger mt-3 text-center">
                                    @TempData["ProductError"]
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>

    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this Product?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="btnContinueToDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const quantityInput = document.querySelector('.quantity-input');
            const minusBtn = document.querySelector('.minus-btn');
            const plusBtn = document.querySelector('.plus-btn');

            if (quantityInput && minusBtn && plusBtn) {
                minusBtn.addEventListener('click', () => {
                    let currentQuantity = parseInt(quantityInput.value);
                    if (currentQuantity > 1) {
                        quantityInput.value = currentQuantity - 1;
                    }
                });

                plusBtn.addEventListener('click', () => {
                    let currentQuantity = parseInt(quantityInput.value);
                    quantityInput.value = currentQuantity + 1;
                });
            }
        });

        function validateStock() {
            // You can add client-side stock validation here if needed
            // For example, if you have a hidden input with available stock:
            // var availableStock = parseInt(document.getElementById('availableStockHiddenInput').value);
            // var requestedQuantity = parseInt(document.querySelector('.quantity-input').value);
            // if (requestedQuantity > availableStock) {
            //     Swal.fire('Error', 'Not enough stock available!', 'error');
            //     return false;
            // }
            return true; // Allow form submission by default if no client-side check
        }
    </script>
}
